trigger:
  branches:
    include:
    - main

pr:
  branches:
    include:
    - main

variables:
  # Frontend variables
  frontendAppName: '$(AZURE_FRONTEND_APP_NAME)'
  frontendServiceConnection: '$(AZURE_FRONTEND_SERVICE_CONNECTION)'
  
  # Backend variables
  backendAppName: '$(AZURE_BACKEND_APP_NAME)'
  backendServiceConnection: '$(AZURE_BACKEND_SERVICE_CONNECTION)'
  
  # Environment variables
  environment: '$(ENVIRONMENT)'
  
  # Build configuration
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: BuildFrontend
    displayName: 'Build Frontend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    - script: |
        npm ci
      displayName: 'Install dependencies'
    
    - script: |
        npm run build
      displayName: 'Build frontend'
      env:
        NEXT_PUBLIC_API_URL: $(NEXT_PUBLIC_API_URL)
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '.next'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        artifact: 'frontend'
        publishLocation: 'pipeline'
  
  - job: BuildBackend
    displayName: 'Build Backend'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
        addToPath: true
      displayName: 'Install Python'
    
    - script: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
    
    - script: |
        cd backend
        echo "POSTGRES_SERVER=$(POSTGRES_SERVER)" > .env
        echo "POSTGRES_USER=$(POSTGRES_USER)" >> .env
        echo "POSTGRES_PASSWORD=$(POSTGRES_PASSWORD)" >> .env
        echo "POSTGRES_DB=$(POSTGRES_DB)" >> .env
        echo "AZURE_TENANT_ID=$(AZURE_TENANT_ID)" >> .env
        echo "AZURE_CLIENT_ID=$(AZURE_CLIENT_ID)" >> .env
        echo "AZURE_CLIENT_SECRET=$(AZURE_CLIENT_SECRET)" >> .env
        echo "API_URL=$(API_URL)" >> .env
        echo "FRONTEND_URL=$(FRONTEND_URL)" >> .env
        echo "COOKIE_SECURE=True" >> .env
        echo "SECRET_KEY=$(SECRET_KEY)" >> .env
        echo "BACKEND_CORS_ORIGINS=$(BACKEND_CORS_ORIGINS)" >> .env
      displayName: 'Create .env file'
    
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'backend'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/backend.zip'
        artifact: 'backend'
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: 'Deploy stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployFrontend
    displayName: 'Deploy Frontend'
    environment: $(environment)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'frontend'
              targetPath: '$(Pipeline.Workspace)'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(frontendServiceConnection)
              appName: $(frontendAppName)
              package: '$(Pipeline.Workspace)/frontend.zip'
              deploymentMethod: 'auto'
  
  - deployment: DeployBackend
    displayName: 'Deploy Backend'
    environment: $(environment)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'backend'
              targetPath: '$(Pipeline.Workspace)'
          
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(backendServiceConnection)
              appName: $(backendAppName)
              package: '$(Pipeline.Workspace)/backend.zip'
              deploymentMethod: 'auto'
